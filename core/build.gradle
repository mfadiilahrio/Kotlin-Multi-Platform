apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.squareup.sqldelight'

kotlin {
    targets {
        fromPreset(presets.jvm, 'android')

//        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64

//        fromPreset(iOSTarget, 'iOS') {
//            binaries {
//                framework('Core') {
//                    freeCompilerArgs.add("-Xobjc-generics")
//                }
//            }
//        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common"

                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"

                // Coroutines
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"

                // HTTP
                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "io.ktor:ktor-client-json:$ktor_version"
                implementation "io.ktor:ktor-client-logging:$ktor_version"
                implementation "io.ktor:ktor-client-serialization:$ktor_version"

                // Reactive
                implementation "com.badoo.reaktive:reaktive:$reactive_version"

                //Cache
                implementation "com.squareup.sqldelight:runtime:$sqldelight_version"
            }
        }

        androidMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib"

                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"

                // Coroutines
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

                // HTTP
                implementation "io.ktor:ktor-client-android:$ktor_version"
                implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-logging-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-serialization-jvm:$ktor_version"
            }
        }

//        iOSMain {
//            dependencies {
//                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
//
//                // HTTP
//                implementation "io.ktor:ktor-client-ios:$ktor_version"
//                implementation "io.ktor:ktor-client-core-native:$ktor_version"
//                implementation "io.ktor:ktor-client-json-native:$ktor_version"
//                implementation "io.ktor:ktor-client-logging-native:$ktor_version"
//                implementation "io.ktor:ktor-client-serialization-native:$ktor_version"
//                // Cache
//                implementation "com.squareup.sqldelight:ios-driver:$sqldelight_version"
//
//            }
//        }

        all {
            languageSettings {
                progressiveMode = true
                useExperimentalAnnotation('kotlin.Experimental')
            }
        }
    }
}

sqldelight {
    MoviesDatabase {
        packageName = "com.rio.core.sql"
        sourceFolders = ["sqldelight"]
        schemaOutputDirectory = file("src/commonMain/sqldelight/databases")
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

// Xcode-specific
//task packForXCode(type: Sync) {
//    final File frameworkDir = new File(buildDir, "xcode-frameworks")
//    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
//    final def framework = kotlin.targets.iOS.binaries.getFramework("Core", mode)

//    inputs.property "mode", mode
//    dependsOn framework.linkTask

//    from { framework.outputFile.parentFile }
//    into frameworkDir
//
//    doLast {
//        new File(frameworkDir, 'gradlew').with {
//            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
//            setExecutable(true)
//        }
//    }
//}

//tasks.build.dependsOn packForXCode
dependencies {
}